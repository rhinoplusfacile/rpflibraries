<?php

namespace rhinoplusfacile\csv;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-02 at 20:33:16.
 */
class CSVTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var CSV
     */
    protected $object;
    protected $handle;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->handle = $this->getMockBuilder('\SplFileObject')
                ->setMethods(array('fputcsv'))
                ->setConstructorArgs(['nul', 'w'])
                ->getMock();
        $this->object = new CSV($this->handle);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function testHeadersSent()
    {
        $rclass = new \ReflectionClass($this->object);
        $headers_sent = $rclass->getProperty('headers_sent');
        $headers_sent->setAccessible(true);
        $this->assertFalse($headers_sent->getValue($this->object));
        $this->handle->expects($this->any())
                ->method('fputcsv');
        $this->object->flush();
        $this->assertTrue($headers_sent->getValue($this->object));
        $headers_sent->setValue($this->object, false);
    }

    public function testAddHeader()
    {
        $rclass = new \ReflectionClass($this->object);
        $headers = $rclass->getProperty('headers');
        $headers->setAccessible(true);
        $this->object->addHeader('head1', 'Header 1');
        $this->assertEquals($headers->getValue($this->object), array('head1' => 'Header 1'));
        $this->object->addHeader('head1', 'Header1');
        $this->assertEquals($headers->getValue($this->object), array('head1' => 'Header1'));
        $this->object->addHeader('head2', 'Header 2');
        $this->assertEquals($headers->getValue($this->object), array('head1' => 'Header1', 'head2' => 'Header 2'));
    }

    public function testSendHeaders()
    {
        $this->object->addHeader('head1', 'Header 1');
        $this->object->addHeader('head2', 'Header 2');
        $this->handle->expects($this->any())
                ->method('fputcsv')
                ->with($this->equalTo(['Header 1', 'Header 2']));
        $this->object->flush();
    }

    public function testAddRow()
    {
        $rclass = new \ReflectionClass($this->object);
        $rows = $rclass->getProperty('rows');
        $rows->setAccessible(true);
        $this->object->addHeader('head1', 'Header 1');
        $this->object->addHeader('head2', 'Header 2');
        $this->object->addRow(['head1' => '1', 'head2' => '2']);
        $this->assertEquals($rows->getValue($this->object), [['1', '2']]);
        $this->object->addRow(['head1' => '3', 'head3' => '4']);
        $this->assertEquals($rows->getValue($this->object), [['1', '2'], ['3', '']]);
        $this->object->addRow(['head2' => '5', 'head1' => '6']);
        $this->assertEquals($rows->getValue($this->object), [['1', '2'], ['3', ''], ['6', '5']]);
    }

    public function testFlush()
    {
        $this->handle->expects($this->exactly(4))
                ->method('fputcsv')
                ->withConsecutive(array($this->equalTo(['Header 1', 'Header 2'])), array($this->equalTo(['1', '2'])), array($this->equalTo(['3', '4'])), array($this->equalTo(['5', '6'])));
        $this->object->addHeader('head1', 'Header 1');
        $this->object->addHeader('head2', 'Header 2');
        $this->object->addRow(['head1' => '1', 'head2' => '2']);
        $this->object->flush();
        $this->object->addRow(['head1' => '3', 'head2' => '4']);
        $this->object->addRow(['head1' => '5', 'head2' => '6']);
        $this->object->flush();
    }

    /**
     * @expectedException LogicException
     * @expectedExceptionMessage Headers should not be added after rows have been added.
     */
    public function testAddHeadersAfterRows()
    {
        $this->object->addHeader('head1', 'Header 1');
        $this->object->addHeader('head2', 'Header 2');
        $this->object->addRow(['head1' => '1', 'head2' => '2']);
        $this->object->addHeader('head3', 'Header 3');
    }

    /**
     * @expectedException LogicException
     * @expectedExceptionMessage Headers should not be added after flush has been called at least once.
     */
    public function testAddHeadersAfterFlush()
    {
        $this->handle->expects($this->any())
                ->method('fputcsv');
        $this->object->addHeader('head1', 'Header 1');
        $this->object->addHeader('head2', 'Header 2');
        $this->object->flush();
        $this->object->addHeader('head3', 'Header 3');
    }

}
